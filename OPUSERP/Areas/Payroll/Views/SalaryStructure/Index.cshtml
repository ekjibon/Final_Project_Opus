@model EmployeesSalaryStructureViewModel
@{
    ViewData["Title"] = "Employees Salary Structure";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Style{
    <style>
        ul.ui-autocomplete {
            z-index: 99999999;
        }
    </style>
}

<div class="card" style="width: 100%;">
    <div class="card-body">
        <h5 class="card-title" style="color: black">Employees Salary Structure</h5>
        <hr>
        <div class="container">
            <form asp-area="Payroll" asp-controller="SalaryStructure" asp-action="Index" method="post" data-parsley-validate="parsley">

                <div asp-validation-summary="All" class="text-danger"></div>
                <div class="row">
                    <input type="hidden" id="editId" name="editId" value=0>
                    <input type="hidden" id="employeeInfoId" name="employeeInfoId">
                    <div class="col-sm-6">
                        <div class=" row col-md-12">
                            <div class="col-md-11">
                                <div class="form-group row">
                                    <label style="padding-left: 0px;" for="employeeInfoId" class="col-sm-3 col-form-label">Emp Name <span style="color:red;">*</span></label>
                                    <div class="col-sm-9">
                                        <input style="margin-left: 10px;" type="text" class="form-control" id="employeeName" name="employeeName" data-parsley-required="true" data-parsley-trigger="keyup">

                                    </div>
                                </div>
                            </div>
                            <div class="col-md-1">
                                <button type="button" value="View" title="View Structure" onclick="GetSalaryStructure()" class="btn btn-info btn-sm"><i class="fas fa-street-view"></i></button>
                            </div>
                        </div>


                        <div class="form-group row">
                            <label for="Designation" class="col-sm-3 col-form-label">Designation </label>
                            <div class="col-sm-9">
                                <input type="text" class="form-control" id="Designation" name="Designation" readonly="readonly">
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="department" class="col-sm-3 col-form-label">Department</label>
                            <div class="col-sm-9">
                                <input type="text" class="form-control" id="department" name="department" readonly>
                            </div>
                        </div>

                    </div>
                    <div class="col-sm-6">
                        <div class="form-group row">
                            <label for="salaryGradeId" class="col-sm-4 col-form-label">Salary Grade <span style="color:red;">*</span></label>
                            <div class="col-sm-8">
                                <select name="salaryGradeId" id="salaryGradeId" class="form-control" data-parsley-required="true">
                                    <option value="">Select Salary Grade</option>
                                    @foreach (var data in Model.salaryGradesList)
                                    {
                                        <option value="@data.Id">@data.gradeName</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="salarySlab" class="col-sm-4 col-form-label">Salary Slab<span style="color:red;">*</span></label>
                            <div class="col-sm-8">
                                <select name="salarySlab" id="salarySlab" class="form-control" data-parsley-required="true">
                                    <option value="">Select Slab</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="amount" class="col-sm-4 col-form-label">Gross Amount <span style="color:red;">*</span></label>
                            <div class="col-sm-8">
                                <input type="number" class="form-control" id="amount" value="" name="amount" data-parsley-required="true" >
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="effectiveDate" class="col-sm-4 col-form-label">Effective Date </label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control" id="effectiveDate" name="effectiveDate" autocomplete="off">
                            </div>
                        </div>
                    </div>
                </div>
                <hr>
                <button type="submit" value="Submit" title="Calculate" class="btn btn-success btn-lg" style="float:right; margin-top:5px;"><i class="fas fa-save"></i></button>
                <a title="Tax Calculate" class="btn btn-success" onclick="opentaxdetails()" style="float:left; margin-top:5px;color:black">Tax Calculation</a>
            </form>
        </div>
    </div>
</div>

<br />
<hr />
<div class="row clearfix">
    <div class="col-12">
        <div class="card mb-4">
            <!-- Card Header - Dropdown -->
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">Employees Salary Structure List</h6>
            </div>

            <!-- Card Body -->
            <div class="card-body">
                <div class="row col-md-12">
                    <div class="col-6">
                        <h6 class="m-0 font-weight-bold text-primary">Addition</h6>
                        <table class="table table-striped table-bordered" id="salaryStructureAdditionTable">
                            <thead>
                                <tr>
                                    <th>SL</th>
                                    <th>Head Name</th>
                                    <th>Amount</th>
                                    <th>Status</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @*@{
                                        int a = 1;
                                        @foreach (var data in Model.employeesSalaryStructuresList.Where(x => x.salaryHead.salaryHeadType == "Addition"))
                                        {
                                            <tr>
                                                <td>@a</td>
                                                <td>@data.salaryHead.salaryHeadName</td>
                                                <td style="text-align:right">@data.amount</td>
                                                <td>@data.isActive</td>
                                                <td>
                                                    <a class="btn btn-success" onclick="EditTblStructure(@a,'@data.salaryHead.salaryHeadName','@data.isActive',@data.amount,@data.Id)" href="javascript:void(0)" data-toggle="modal" data-target="#viewEmpSalaryStructureModal"><i class="fa fa-edit"></i></a>
                                                </td>
                                            </tr>
                                            a++;
                                        }
                                    }*@
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="2" style="text-align:right">Total</td>
                                    <td style="text-align:right">@Model.employeesSalaryStructuresList.Where(x => x.salaryHead.salaryHeadType == "Addition").Sum(x => x.amount)</td>
                                    <td colspan="2"></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                    <div class="col-6">
                        <h6 class="m-0 font-weight-bold text-primary">Deduction</h6>
                        <table class="table table-striped table-bordered" id="salaryStructureDeductionTable">
                            <thead>
                                <tr>
                                    <th>SL</th>
                                    <th>Head Name</th>
                                    <th>Amount</th>
                                    <th>Status</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @*@{
                                        int d = 1;
                                        @foreach (var data in Model.employeesSalaryStructuresList.Where(x => x.salaryHead.salaryHeadType == "Deduction"))
                                        {
                                            <tr>
                                                <td>@d</td>
                                                <td>@data.salaryHead.salaryHeadName</td>
                                                <td style="text-align:right">@data.amount</td>
                                                <td>@data.isActive</td>
                                                <td>
                                                    <a class="btn btn-success" onclick="EditTblStructure(@d,'@data.salaryHead.salaryHeadName','@data.isActive',@data.amount,@data.Id)" href="javascript:void(0)" data-toggle="modal" data-target="#viewEmpSalaryStructureModal" ><i class="fa fa-edit"></i></a>
                                                </td>
                                            </tr>
                                            d++;
                                        }
                                    }*@
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="2" style="text-align:right">Total</td>
                                    <td style="text-align:right">@Model.employeesSalaryStructuresList.Where(x => x.salaryHead.salaryHeadType == "Deduction").Sum(x => x.amount)</td>
                                    <td colspan="2"></td>
                                </tr>
                            </tfoot>
                        </table>
                        <div class="row">
                            <div class="form-group row">
                                <label for="grossamount" class="col-sm-5 col-form-label">Gross Amount</label>
                                <div class="col-sm-7">
                                    @{
                                        decimal gross = 0;
                                        decimal additions = Model.employeesSalaryStructuresList.Where(x => x.salaryHead.salaryHeadType == "Addition" && x.isActive == "Active").Sum(x => x.amount);
                                        decimal deductions = Model.employeesSalaryStructuresList.Where(x => x.salaryHead.salaryHeadType == "Deduction" && x.isActive == "Active").Sum(x => x.amount);
                                        gross = additions - deductions;
                                    }
                                    <input type="number" class="form-control" id="grossamount" style="text-align:right" value="@gross" name="grossamount" data-parsley-required="true" readonly>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>


            </div>
        </div>
    </div>
</div>
<!-- View Service Reminders Modal-->
<div class="modal fade" id="viewEmpSalaryStructureModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Edit Salary Structure</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12">
                        <form id="frmEditSalaryStructure" autocomplete="off">
                            <div class="form-group row">
                                <input type="hidden" id="editsalarystructureId" name="editsalarystructureId" />
                                <label for="headName" class="col-sm-3 col-form-label">Head Name</label>
                                <div class="col-sm-9">
                                    <input type="text" class="form-control" id="headName" value="" name="headName" data-parsley-required="true" readonly>
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="headamount" class="col-sm-3 col-form-label">Amount <span style="color:red;">*</span></label>
                                <div class="col-sm-9">
                                    <input type="number" class="form-control" id="headamount" value="" name="headamount" data-parsley-required="true">
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="salarystructureStatus" class="col-sm-3 col-form-label">Status<span style="color:red;">*</span></label>
                                <div class="col-sm-9">
                                    <select name="salarystructureStatus" id="salarystructureStatus" class="form-control" data-parsley-required="true">
                                        <option value="Active">Active</option>
                                        <option value="InActive">InActive</option>
                                    </select>
                                </div>
                            </div>
                        </form>

                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <a href="javascript:void(0)" style="color:deepskyblue" data-dismiss="modal">Close</a>&nbsp;
                <a href="javascript:void(0)" onclick="Savesalarystructure()" style="background-color:#024972;" class="btn-primary btn-sm pull-right">Save</a>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script>
        $(document).ready(function () {
            //$('#salaryStructureAdditionTable').DataTable();
            //$('#salaryStructureDeductionTable').DataTable();
            $("#effectiveDate").datepicker({ dateFormat: "dd-M-yy", showAnim: "scale", changeMonth: true, changeYear: true, yearRange: "2010:2050" }).datepicker();

            $("#salaryGradeId").change(function () {
                Common.Ajax('GET', '/Payroll/SalaryStructure/GetSalarySlabBysalaryGradeId/?salaryGradeId=' + $("#salaryGradeId").val(), [], 'json', GetSalarySlab);
            });

            $("#salarySlab").change(function () {
                Common.Ajax('GET', '/Payroll/SalaryStructure/GetSalarySlabById/?Id=' + $("#salarySlab").val(), [], 'json', GetSalarySlabAmount);
            });

            Common.Ajax('GET', '/global/api/GetActiveAllEmployeeInfo', [], 'json', ajaxGetEmployees);

            let employeeInfoId = parseInt(@ViewBag.employeeInfoId) ? parseInt(@ViewBag.employeeInfoId) : 0;

            if (employeeInfoId == null || employeeInfoId == 0 || employeeInfoId == '') {

            }
            else {
                Common.Ajax('GET', '/Payroll/SalaryStructure/GetEmployeesSalaryStructureAdditionByEmpId/?employeeInfoId=' + employeeInfoId, [], 'json', ajaxVieWEmpSalaryStructureAddition);
                Common.Ajax('GET', '/Payroll/SalaryStructure/GetEmployeesSalaryStructureDeductionByEmpId/?employeeInfoId=' + employeeInfoId, [], 'json', ajaxVieWEmpSalaryStructureDeduction);
                Common.Ajax('GET', '/Payroll/SalaryStructure/GetEmployeesGrossAmountByEmpId/?employeeInfoId=' + employeeInfoId, [], 'json', ajaxGetEmployeesGrossAmount);
                Common.Ajax('GET', '/Payroll/SalaryStructure/GetEmpStructureByEmpId/?employeeInfoId=' + employeeInfoId, [], 'json', ajaxGetEmpStructureByEmpIdWithName);
            }

        });
        function opentaxdetails()
        {
            var emplyeeId = $("#employeeInfoId").val();
            if (emplyeeId == "" || emplyeeId == "0")
            {
                alert("Please enter employee name.");
                return;
            }
            window.location.href = "/Payroll/PayrollReport/TaxCalculationReport?employeeInfoId=" + emplyeeId+"&&taxYearId="+@Model.salaryPeriod.taxYearId+"&&periodId="+@Model.salaryPeriod.Id;

        }
        function GetSalarySlab(response) {
            $('#salarySlab').empty();
            $('#salarySlab').append('<option value="">Select Slab</option');
            $.each(response, function (id, option) {
                $('#salarySlab').append('<option value="' + option.Id + '">' + option.slabName + '</option');
            });
        }
        function GetSalarySlabAmount(response) {
            $('#amount').empty();
            $('#amount').val(response.slabAmount);

        }


        function ajaxGetEmployees(response) {
            var GeEmployeesList = [];
            $.each(response, function (id, option) {
                var obj = new Object();
                obj.key = option.Id;
                obj.value = option.nameEnglish + "(" + option.employeeCode + ")";
                obj.designation = option.designation;               
                obj.employeeCode = option.employeeCode;
                GeEmployeesList[GeEmployeesList.length] = obj;
            });
            //console.log(GeEmployeesList);
            $('#employeeName').autocomplete({
                source: GeEmployeesList,
                select: function (event, ui) {
                    $("#employeeName").val(ui.item.value);
                    $("#Designation").val(ui.item.designation);
                    $("#employeeInfoId").val(ui.item.key);                                     
                }
            });
        }

        function GetSalaryStructure() {
            if ($('#employeeInfoId').val() == "") {
                swal("Please Select Employee Name");
                return false;
            }

            Common.Ajax('GET', '/Payroll/SalaryStructure/GetEmployeesSalaryStructureAdditionByEmpId/?employeeInfoId=' + $("#employeeInfoId").val(), [], 'json', ajaxVieWEmpSalaryStructureAddition);
            Common.Ajax('GET', '/Payroll/SalaryStructure/GetEmployeesSalaryStructureDeductionByEmpId/?employeeInfoId=' + $("#employeeInfoId").val(), [], 'json', ajaxVieWEmpSalaryStructureDeduction);
            Common.Ajax('GET', '/Payroll/SalaryStructure/GetEmployeesGrossAmountByEmpId/?employeeInfoId=' + $("#employeeInfoId").val(), [], 'json', ajaxGetEmployeesGrossAmount);
            Common.Ajax('GET', '/Payroll/SalaryStructure/GetEmpStructureByEmpId/?employeeInfoId=' + $("#employeeInfoId").val(), [], 'json', ajaxGetEmpStructureByEmpId);
        }

        function ajaxGetEmployeesGrossAmount(response) {
            $('#grossamount').val(response);
        }

        function ajaxGetEmpStructureByEmpId(response) {
            $('#salaryGradeId').val(response.salarySlab.salaryGradeId);
            Common.Ajax('GET', '/Payroll/SalaryStructure/GetSalarySlabBysalaryGradeId/?salaryGradeId=' + response.salarySlab.salaryGradeId, [], 'json', GetSalarySlab, false);
            $('#salarySlab').val(response.salarySlabId);
            Common.Ajax('GET', '/Payroll/SalaryStructure/GetSalarySlabById/?Id=' + response.salarySlabId, [], 'json', GetSalarySlabAmount);
            if (response.effectiveDate == null) {
                $('#effectiveDate').val('');
            }
            else {
                $('#effectiveDate').val(getPurchaseDate(response.effectiveDate));
            }            
        }
        
        function ajaxGetEmpStructureByEmpIdWithName(response) {
            $("#employeeName").val(response.employeeInfo.nameEnglish + "(" + response.employeeInfo.employeeCode + ")");
            $("#Designation").val(response.employeeInfo.designation);
            $("#employeeInfoId").val(response.employeeInfoId);
            $("#department").val(response.employeeInfo.department.deptName);   

            $('#salaryGradeId').val(response.salarySlab.salaryGradeId);
            Common.Ajax('GET', '/Payroll/SalaryStructure/GetSalarySlabBysalaryGradeId/?salaryGradeId=' + response.salarySlab.salaryGradeId, [], 'json', GetSalarySlab, false);
            $('#salarySlab').val(response.salarySlabId);
            Common.Ajax('GET', '/Payroll/SalaryStructure/GetSalarySlabById/?Id=' + response.salarySlabId, [], 'json', GetSalarySlabAmount);
            if (response.effectiveDate == null) {
                $('#effectiveDate').val('');
            }
            else {
                $('#effectiveDate').val(getPurchaseDate(response.effectiveDate));
            }
            
        }

        function ajaxVieWEmpSalaryStructureAddition(response) {
            $("#salaryStructureAdditionTable tbody>tr").remove();
            //$('#salaryStructureAdditionTable').DataTable().empty();
            var dtTableA = $("#salaryStructureAdditionTable");
            var tableBodyA = dtTableA.find('tbody');
            var tablefootA = dtTableA.find('tfoot');
            tableBodyA.empty();
            tablefootA.empty();
            var i = 1;
            var Total = "Total";
            var TotalAdd = 0;
            $.each(response, function (key, value) {
                var trHtml = '<tr><td>' + i + '</td><td>' + value.salaryHead.salaryHeadName + '</td><td style="text-align:right;">' + value.amount.toFixed(2) + '</td><td>' + value.isActive + '</td><td ><a onclick="EditTblStructure(' + i + ", '" + value.salaryHead.salaryHeadName + "', '" + value.isActive + "'," + value.amount + ',' + value.Id + ')" href="javascript:void(0)" title="Edit" class="btn btn-success btn-xs" data-toggle="modal" data-target="#viewEmpSalaryStructureModal" > <i class="fa fa-edit"></i></a ></td></tr>';
                tableBodyA.append(trHtml);
                i++;
                TotalAdd = TotalAdd + value.amount;
            });
            var trHtmlfoot = '<tr><td colspan="2"  style="text-align:right;">' + Total + '</td><td style="text-align:right;">' + TotalAdd.toFixed(2) + '</td> <td><td/></tr>';
            tablefootA.append(trHtmlfoot);
            $('#salaryStructureAdditionTable').DataTable();
        }
        function ajaxVieWEmpSalaryStructureDeduction(response) {
            $("#salaryStructureDeductionTable tbody>tr").remove();
            //$('#salaryStructureDeductionTable').DataTable().empty();
            var dtTableA = $("#salaryStructureDeductionTable");
            var tableBodyA = dtTableA.find('tbody');
            var tablefootA = dtTableA.find('tfoot');
            tableBodyA.empty();
            tablefootA.empty();
            var i = 1;
            var Total = "Total";
            var TotalAdd = 0;
            $.each(response, function (key, value) {
                var trHtml = '<tr><td>' + i + '</td><td>' + value.salaryHead.salaryHeadName + '</td><td style="text-align:right;">' + value.amount.toFixed(2) + '</td><td>' + value.isActive + '</td><td ><a onclick="EditTblStructure(' + i + ", '" + value.salaryHead.salaryHeadName + "', '" + value.isActive + "'," + value.amount + ',' + value.Id + ')" href="javascript:void(0)" title="Edit" class="btn btn-success btn-xs" data-toggle="modal" data-target="#viewEmpSalaryStructureModal" > <i class="fa fa-edit"></i></a ></td></tr>';
                tableBodyA.append(trHtml);
                i++;
                TotalAdd = TotalAdd + value.amount;
            });
            var trHtmlfoot = '<tr><td colspan="2"  style="text-align:right;">' + Total + '</td><td style="text-align:right;">' + TotalAdd.toFixed(2) + '</td> <td><td/></tr>';
            tablefootA.append(trHtmlfoot);
            $('#salaryStructureDeductionTable').DataTable();
        }

        function EditTblStructure(i, salaryHeadName, isActive, amount, Id) {
            $('#editsalarystructureId').val(Id);
            $('#headName').val(salaryHeadName);
            $('#salarystructureStatus').val(isActive);
            $('#headamount').val(amount);
        }
        function Savesalarystructure() {

            let empId = parseInt(@ViewBag.employeeInfoId) ? parseInt(@ViewBag.employeeInfoId) : 0;
            if (empId == 0 || empId == '' || empId == null) {
                empId = $("#employeeInfoId").val();
            }
            //else {
            //    empId = $("#employeeInfoId").val();
            //}

            var form = $("#frmEditSalaryStructure");
                $.ajax({
                    url: '@Url.Action("Editsalarystructure", "SalaryStructure")',
                    data: form.serialize(),
                    type: 'POST',
                    success: function (records) {
                        alert("Save Successfully!");
                        $('#viewEmpSalaryStructureModal').modal('hide');
                        Common.Ajax('GET', '/Payroll/SalaryStructure/GetEmployeesSalaryStructureAdditionByEmpId/?employeeInfoId=' + empId, [], 'json', ajaxVieWEmpSalaryStructureAddition);
                        Common.Ajax('GET', '/Payroll/SalaryStructure/GetEmployeesSalaryStructureDeductionByEmpId/?employeeInfoId=' + empId, [], 'json', ajaxVieWEmpSalaryStructureDeduction);
                        Common.Ajax('GET', '/Payroll/SalaryStructure/GetEmployeesGrossAmountByEmpId/?employeeInfoId=' + empId, [], 'json', ajaxGetEmployeesGrossAmount);
                    }
                });
        }

        function getPurchaseDate(pdate) {
            var formattedDate = new Date(pdate);
            var d = formattedDate.getDate();
            var m = formattedDate.getMonth();
            var y = formattedDate.getFullYear();
            var monthNames = [
                "Jan", "Feb", "Mar",
                "Apr", "May", "Jun", "Jul",
                "Aug", "Sep", "Oct",
                "Nov", "Dec"
            ];
            var fullDate = d + "-" + monthNames[m] + "-" + y;
            return fullDate;
        }
    </script>
}